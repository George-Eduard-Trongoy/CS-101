cat("Minimum number of bills needed:", bill_count, "\n")
}
minimum_bills <- function(price) {
bills <- c(1000, 500, 200, 100, 50)
count <- 0
for (bill in bills) {
num_bills <- price %/% bill
count <- count + num_bills
price <- price %% bill
}
return(count)
}
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
minimum_bills <- function(price) {
bills <- c(1000, 500, 200, 100, 50)
count <- 0
for (bill in bills) {
num_bills <- price %/% bill
count <- count + num_bills
price <- price %% bill
}
return(count)
}
repeat {
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
knitr::opts_chunk$set(echo = TRUE)
# Define the function to calculate the minimum number of bills needed
minimum_bills <- function(price) {
# Available bill denominations in descending order
bills <- c(1000, 500, 200, 100, 50)
# Initialize the count of bills
count <- 0
# Loop through each bill denomination to find the minimum number of bills
for (bill in bills) {
# Calculate the number of bills of this denomination
num_bills <- price %/% bill
# Update the total count of bills
count <- count + num_bills
# Update the remaining price
price <- price %% bill
}
# Return the minimum number of bills
return(count)
}
# Loop until a valid input is received
repeat {
# Prompt the user for input and convert it to numeric
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
# Check if input is valid (numeric, positive, and divisible by 50)
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
# Output the result
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
knitr::opts_chunk$set(echo = TRUE)
# Define the function to calculate the minimum number of bills needed
minimum_bills <- function(price) {
# Available bill denominations in descending order
bills <- c(1000, 500, 200, 100, 50)
# Initialize the count of bills
count <- 0
# Loop through each bill denomination to find the minimum number of bills
for (bill in bills) {
# Calculate the number of bills of this denomination
num_bills <- price %/% bill
# Update the total count of bills
count <- count + num_bills
# Update the remaining price
price <- price %% bill
}
# Return the minimum number of bills
return(count)
}
# Loop until a valid input is received
repeat {
# Prompt the user for input and convert it to numeric
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
# Check if input is valid (numeric, positive, and divisible by 50)
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
# Output the result
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
# Define the function to calculate the minimum number of bills needed
minimum_bills <- function(price) {
# Available bill denominations in descending order
bills <- c(1000, 500, 200, 100, 50)
# Initialize the count of bills
count <- 0
# Loop through each bill denomination to find the minimum number of bills
for (bill in bills) {
# Calculate the number of bills of this denomination
num_bills <- price %/% bill
# Update the total count of bills
count <- count + num_bills
# Update the remaining price
price <- price %% bill
}
# Return the minimum number of bills
return(count)
}
# Loop until a valid input is received
repeat {
# Prompt the user for input and convert it to numeric
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
# Check if input is valid (numeric, positive, and divisible by 50)
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
# Output the result
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
# Define the function to calculate the minimum number of bills needed
minimum_bills <- function(price) {
# Available bill denominations in descending order
bills <- c(1000, 500, 200, 100, 50)
# Initialize the count of bills
count <- 0
# Loop through each bill denomination to find the minimum number of bills
for (bill in bills) {
# Calculate the number of bills of this denomination
num_bills <- price %/% bill
# Update the total count of bills
count <- count + num_bills
# Update the remaining price
price <- price %% bill
}
# Return the minimum number of bills
return(count)
}
# Loop until a valid input is received
repeat {
# Prompt the user for input and convert it to numeric
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
# Check if input is valid (numeric, positive, and divisible by 50)
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
# Output the result
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
# Define the function to calculate the minimum number of bills needed
minimum_bills <- function(price) {
# Available bill denominations in descending order
bills <- c(1000, 500, 200, 100, 50)
# Initialize the count of bills
count <- 0
# Loop through each bill denomination to find the minimum number of bills
for (bill in bills) {
# Calculate the number of bills of this denomination
num_bills <- price %/% bill
# Update the total count of bills
count <- count + num_bills
# Update the remaining price
price <- price %% bill
}
# Return the minimum number of bills
return(count)
}
# Loop until a valid input is received
repeat {
# Prompt the user for input and convert it to numeric
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
# Check if input is valid (numeric, positive, and divisible by 50)
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
# Output the result
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
# Create the dataframe
math_scores <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
# Output the dataframe
print(math_scores)
grade <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
grade
grade <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
grade
ave <- rowMeans(grade[2:5])
for (i in 1:nrowgrade)) {
ave <- rowMeans(grade[2:5])
for (i in 1:nrow(grade)) {
if (averages[i] > 90) {
print(paste(grade$Name[i], "’s average grade this semester is", round(ave[i], 2)))
}
}
ave <- rowMeans(grade[2:5])
for (i in 1:nrow(grade)) {
if (ave[i] > 90) {
print(paste(grade$Name[i], "’s average grade this semester is", round(ave[i], 2)))
}
}
ave <- rowMeans(grade[2:5])
for (i in 1:nrow(grade)) {
if (ave[i] > 90) {
print(paste(grade$Name[i], "’s average grade this semester is", round(ave[i], 2)))
}
}
ave
ave <- rowMeans(grade[2:5])
for (i in 1:nrow(grade)) {
if (ave[i] > 90) {
print(paste(grade$Name[i], "’s average grade this semester is", round(ave[i], 2)))
}
}
for (i in 1:nrow(grade)) {
total_score <- grade[i, 2] + grade[i, 3] + grade[i, 4] + grade[i, 5]
average_score <- total_score / 4
grades <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
grades
# Calculate the average grades manually
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Filter and print the average scores for students with an average > 90
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
# Calculate the average grades manually
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Filter and print the average scores for students with an average > 90
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 3: Filter and print the average scores for students with an average > 90
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 3: Filter and print the average scores for students with an average > 90
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 2: Calculate the average grades manually
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 3: Filter and print the average scores for students with an average > 90
output_found <- FALSE  # Flag to check if we found any output
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
output_found <- TRUE
}
}
grades <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
grades
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 2: Calculate the average grades manually
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 3: Filter and print the average scores for students with an average > 90
output_found <- FALSE  # Flag to check if we found any output
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
output_found <- TRUE
}
}
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
# Step 3: Print the average scores for students with an average > 90
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
average_test_scores <- c(
(sum(grades$Grade1) / nrow(grades)),
(sum(grades$Grade2) / nrow(grades)),
(sum(grades$Grade3) / nrow(grades)),
(sum(grades$Grade4) / nrow(grades))
)
# Step 3: Check for tests with an average < 80 and print a message
for (i in 1:length(average_test_scores)) {
if (average_test_scores[i] < 80) {
cat("The", i, "test was difficult.\n")
}
}
average_test_scores <- c(
(sum(grades$Grade1) / nrow(grades)),
(sum(grades$Grade2) / nrow(grades)),
(sum(grades$Grade3) / nrow(grades)),
(sum(grades$Grade4) / nrow(grades))
)
# Step 3: Check for tests with an average < 80 and print a message
for (i in 1:length(average_test_scores)) {
if (average_test_scores[i] < 80) {
cat("The", i, "test was difficult.\n")
}
}
for (i in 1:nrow(grades)) {
highest_score <- grades$Grade1[i]  # Start with Grade1 as the highest
# Compare with other grades
if (grades$Grade2[i] > highest_score) {
highest_score <- grades$Grade2[i]
}
if (grades$Grade3[i] > highest_score) {
highest_score <- grades$Grade3[i]
}
if (grades$Grade4[i] > highest_score) {
highest_score <- grades$Grade4[i]
}
# Step 3: Print message if highest score exceeds 90
if (highest_score > 90) {
cat(grades$Name[i], "’s highest grade this semester is", highest_score, ".\n")
}
}
chosen_number <- as.numeric(readline(prompt = "Select a number from 1 to 50: "))
if (is.na(chosen_number) || chosen_number < 1 || chosen_number > 50) {
cat("The number selected is beyond the range of 1 to 50\n")
} else if (chosen_number == 20) {
cat("TRUE\n")
} else {
cat("The selected number is:", chosen_number, "\n")
}
knitr::opts_chunk$set(echo = TRUE)
shoe_data <- data.frame(
Shoe_Size = c(6.5, 9.0, 8.5, 8.5, 10.5, 7.0, 9.5, 9.0, 13.0, 7.5, 10.5, 8.5, 12.0, 10.5),
Height = c(66.0, 68.0, 64.5, 65.0, 70.0, 64.0, 70.0, 71.0, 72.0, 64.0, 74.5, 67.0, 71.0, 71.0),
Gender = c('F', 'F', 'F', 'F', 'M', 'F', 'F', 'F', 'M', 'F', 'M', 'F', 'M', 'M')
)
extra_data <- data.frame(
Shoe_Size = c(13.0, 11.5, 8.5, 5.0, 10.0, 6.5, 7.5, 8.5, 10.5, 8.5, 10.5, 11.0, 9.0, 13.0),
Height = c(77.0, 72.0, 59.0, 62.0, 72.0, 66.0, 64.0, 67.0, 73.0, 69.0, 72.0, 70.0, 69.0, 70.0),
Gender = c( 'M', 'M','F', 'F', 'M', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'M', 'M')
)
data <- rbind(shoe_data, extra_data)
data
library(xlsx)
write.xlsx(data, "customerdata.xlsx")
male_data <- subset(data, Gender == 'M')
male_data
female_data <- subset(data, Gender == 'F')
female_data
mean_shoesize <- mean(data$Shoe_Size, na.rm = TRUE)
mean_height <- mean(data$Height, na.rm = TRUE)
mean_shoesize
mean_height
months <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
months
factor_months_vector <- factor(months)
factor_months_vector
summary(months)
summary(factor_months_vector)
Direction <- c("East", "West", "North")
Frequency <- c(1, 4, 3)
directiondata <- data.frame(Direction, Frequency)
directiondata
new_order_data <- factor(Direction,levels = c("East","West","North"))
print(new_order_data)
data <- read.table("student.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
data
View(data)
chosen_number <- as.numeric(readline(prompt = "Select a number from 1 to 50: "))
if (is.na(chosen_number) || chosen_number < 1 || chosen_number > 50) {
cat("The number selected is beyond the range of 1 to 50\n")
} else if (chosen_number == 20) {
cat("TRUE\n")
} else {
cat("The selected number is:", chosen_number, "\n")
}
minimum_bills <- function(price) {
bills <- c(1000, 500, 200, 100, 50)
count <- 0
for (bill in bills) {
num_bills <- price %/% bill
count <- count + num_bills
price <- price %% bill
}
return(count)
}
repeat {
price <- as.numeric(readline(prompt = "Enter the price of the snack (divisible by 50): "))
if (!is.na(price) && price > 0 && price %% 50 == 0) {
break
} else {
cat("Invalid input. Please enter a positive number divisible by 50.\n")
}
}
cat("Minimum number of bills needed:", minimum_bills(price), "\n")
grades <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
grades
grades$Average <- (grades$Grade1 + grades$Grade2 + grades$Grade3 + grades$Grade4) / 4
for (i in 1:nrow(grades)) {
if (grades$Average[i] > 90) {
cat(grades$Name[i], "’s average grade this semester is", round(grades$Average[i], 2), ".\n")
}
}
average_test_scores <- c(
(sum(grades$Grade1) / nrow(grades)),
(sum(grades$Grade2) / nrow(grades)),
(sum(grades$Grade3) / nrow(grades)),
(sum(grades$Grade4) / nrow(grades))
)
for (i in 1:length(average_test_scores)) {
if (average_test_scores[i] < 80) {
cat("The", i, "test was difficult.\n")
}
}
for (i in 1:nrow(grades)) {
highest_score <- grades$Grade1[i]
if (grades$Grade2[i] > highest_score) {
highest_score <- grades$Grade2[i]
}
if (grades$Grade3[i] > highest_score) {
highest_score <- grades$Grade3[i]
}
if (grades$Grade4[i] > highest_score) {
highest_score <- grades$Grade4[i]
}
if (highest_score > 90) {
cat(grades$Name[i], "’s highest grade this semester is", highest_score, ".\n")
}
}
shoe_data <- data.frame(
Shoe_Size = c(6.5, 9.0, 8.5, 8.5, 10.5, 7.0, 9.5, 9.0, 13.0, 7.5, 10.5, 8.5, 12.0, 10.5),
Height = c(66.0, 68.0, 64.5, 65.0, 70.0, 64.0, 70.0, 71.0, 72.0, 64.0, 74.5, 67.0, 71.0, 71.0),
Gender = c('F', 'F', 'F', 'F', 'M', 'F', 'F', 'F', 'M', 'F', 'M', 'F', 'M', 'M')
)
extra_data <- data.frame(
Shoe_Size = c(13.0, 11.5, 8.5, 5.0, 10.0, 6.5, 7.5, 8.5, 10.5, 8.5, 10.5, 11.0, 9.0, 13.0),
Height = c(77.0, 72.0, 59.0, 62.0, 72.0, 66.0, 64.0, 67.0, 73.0, 69.0, 72.0, 70.0, 69.0, 70.0),
Gender = c( 'M', 'M','F', 'F', 'M', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'M', 'M')
)
data <- rbind(shoe_data, extra_data)
library(xlsx)
write.xlsx(data, "customerdata.xlsx")
shoe_data <- data.frame(
Shoe_Size = c(6.5, 9.0, 8.5, 8.5, 10.5, 7.0, 9.5, 9.0, 13.0, 7.5, 10.5, 8.5, 12.0, 10.5),
Height = c(66.0, 68.0, 64.5, 65.0, 70.0, 64.0, 70.0, 71.0, 72.0, 64.0, 74.5, 67.0, 71.0, 71.0),
Gender = c('F', 'F', 'F', 'F', 'M', 'F', 'F', 'F', 'M', 'F', 'M', 'F', 'M', 'M')
)
extra_data <- data.frame(
Shoe_Size = c(13.0, 11.5, 8.5, 5.0, 10.0, 6.5, 7.5, 8.5, 10.5, 8.5, 10.5, 11.0, 9.0, 13.0),
Height = c(77.0, 72.0, 59.0, 62.0, 72.0, 66.0, 64.0, 67.0, 73.0, 69.0, 72.0, 70.0, 69.0, 70.0),
Gender = c( 'M', 'M','F', 'F', 'M', 'F', 'F', 'M', 'M', 'F', 'M', 'M', 'M', 'M')
)
data <- rbind(shoe_data, extra_data)
library(xlsx)
write.xlsx(data, "customerdata.xlsx")
data <- read.table("student.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
View(data)
update.packages("rmarkdown")
rmarkdown::RWorksheet_Trongoy-4.Rmd
rmarkdown::render("RWorksheet_Trongoy#4.Rmd")
rmarkdown::render("RWorksheet_Trongoy-4.Rmd")
